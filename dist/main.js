(()=>{"use strict";function t(l){if(1===l.length)return l;{const e=Math.ceil(l.length/2);let n=t(l.slice(0,e)),i=t(l.slice(e)),r=[];for(;n[0]||i[0];)n[0]<i[0]?(r.push(n[0]),n.shift()):i[0]<n[0]?(r.push(i[0]),i.shift()):n[0]==i[0]?(r.push(n[0]),r.push(i[0]),n.shift(),i.shift()):n[0]?i[0]||(r.push(n[0]),n.shift()):(r.push(i[0]),i.shift());return r}}class l{constructor(t){this.data=t,this.left=null,this.right=null}}function e(t){if(0===t.length)return null;{const n=Math.floor(t.length/2),i=new l(t[n]);return i.left=e(t.slice(0,n)),i.right=e(t.slice(n+1)),i}}const n=(t,l="",e=!0)=>{null!==t&&(null!==t.right&&n(t.right,`${l}${e?"│   ":"    "}`,!1),console.log(`${l}${e?"└── ":"┌── "}${t.data}`),null!==t.left&&n(t.left,`${l}${e?"    ":"│   "}`,!0))};let i=new class{constructor(l){this.root=function(l){let n=t(l);return e([...new Set(n)])}(l)}insert(t){!function t(e,n){if(n<e.data&&null==e.left){const t=new l(n);e.left=t}else if(n>e.data&&null==e.right){const t=new l(n);e.right=t}else{if(n<e.data)return t(e.left,n);if(n>e.data)return t(e.right,n);if(n==e.data)return void console.log("value already in tree, try another value")}}(this.root,t)}delete(t){!function t(l,e){if(console.log(l.left),l.left.data===e&&null===l.left.left&&null===l.left.right)l.left=null;else if(l.right.data===e&&null===l.right.left&&null===l.right.right)l.right=null;else{if(e<l.data)return t(l.left,e);if(e>l.data)return t(l.right,e)}}(this.root,t)}}([1,7,4,23,8,9,4,3,5,7,9,67,6345,324]);i.insert(9),n(i.root),console.log("h"),i.delete(9),n(i.root)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,