(()=>{"use strict";function t(l){if(1===l.length)return l;{const e=Math.ceil(l.length/2);let i=t(l.slice(0,e)),r=t(l.slice(e)),f=[];for(;i[0]||r[0];)i[0]<r[0]?(f.push(i[0]),i.shift()):r[0]<i[0]?(f.push(r[0]),r.shift()):i[0]==r[0]?(f.push(i[0]),f.push(r[0]),i.shift(),r.shift()):i[0]?r[0]||(f.push(i[0]),i.shift()):(f.push(r[0]),r.shift());return f}}class l{constructor(t){this.data=t,this.left=null,this.right=null}}function e(t){if(0===t.length)return null;{const i=Math.floor(t.length/2),r=new l(t[i]);return r.left=e(t.slice(0,i)),r.right=e(t.slice(i+1)),r}}const i=(t,l="",e=!0)=>{null!==t&&(null!==t.right&&i(t.right,`${l}${e?"│   ":"    "}`,!1),console.log(`${l}${e?"└── ":"┌── "}${t.data}`),null!==t.left&&i(t.left,`${l}${e?"    ":"│   "}`,!0))};let r=new class{constructor(l){this.root=function(l){let i=t(l);return e([...new Set(i)])}(l)}insert(t){!function t(e,i){if(i<e.data&&null==e.left){const t=new l(i);e.left=t}else if(i>e.data&&null==e.right){const t=new l(i);e.right=t}else{if(i<e.data)return t(e.left,i);if(i>e.data)return t(e.right,i);if(i==e.data)return void console.log("value already in tree, try another value")}}(this.root,t)}delete(t){!function t(l,e){if(console.log(l.left),l.left.data===e&&null===l.left.left&&null===l.left.right)l.left=null;else if(l.right.data===e&&null===l.right.left&&null===l.right.right)l.right=null;else if(l.left.data===e&&null!==l.left.left&&null===l.left.left.left&&null===l.left.left.right&&null===l.left.right)l.left=l.left.left;else if(l.left.data===e&&null!==l.left.right&&null===l.left.left.left&&null===l.left.left.right&&null===l.left.left)l.left=l.left.right;else if(l.right.data===e&&null!==l.right.left&&null===l.right.left.left&&null===l.right.left.right&&null===l.right.right)l.right=l.right.left;else if(l.right.data===e&&null!==l.right.right&&null===l.right.left.left&&null===l.right.left.right&&null===l.right.left)l.right=l.right.right;else{if(e<l.data)return t(l.left,e);if(e>l.data)return t(l.right,e)}}(this.root,t)}}([1,7,4,23,8,9,4,3,5,7,9,67,6345,324]);r.insert(9),i(r.root),console.log("h"),r.delete(23),i(r.root),r.delete(3),i(r.root)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,