(()=>{"use strict";function t(l){if(1===l.length)return l;{const e=Math.ceil(l.length/2);let i=t(l.slice(0,e)),r=t(l.slice(e)),n=[];for(;i[0]||r[0];)i[0]<r[0]?(n.push(i[0]),i.shift()):r[0]<i[0]?(n.push(r[0]),r.shift()):i[0]==r[0]?(n.push(i[0]),n.push(r[0]),i.shift(),r.shift()):i[0]?r[0]||(n.push(i[0]),i.shift()):(n.push(r[0]),r.shift());return n}}class l{constructor(t){this.data=t,this.left=null,this.right=null}}function e(t){if(0===t.length)return null;{const i=Math.floor(t.length/2),r=new l(t[i]);return r.left=e(t.slice(0,i)),r.right=e(t.slice(i+1)),r}}const i=(t,l="",e=!0)=>{null!==t&&(null!==t.right&&i(t.right,`${l}${e?"│   ":"    "}`,!1),console.log(`${l}${e?"└── ":"┌── "}${t.data}`),null!==t.left&&i(t.left,`${l}${e?"    ":"│   "}`,!0))};let r=new class{constructor(l){this.root=function(l){let i=t(l);return e([...new Set(i)])}(l)}insert(t){!function t(e,i){if(i<e.data&&null==e.left){const t=new l(i);e.left=t}else if(i>e.data&&null==e.right){const t=new l(i);e.right=t}else{if(i<e.data)return t(e.left,i);if(i>e.data)return t(e.right,i);if(i==e.data)return void console.log("value already in tree, try another value")}}(this.root,t)}delete(t){!function t(l,e){if(l.left&&l.left.data===e&&null===l.left.left&&null===l.left.right)l.left=null;else if(l.right&&l.right.data===e&&null===l.right.left&&null===l.right.right)l.right=null;else if(l.left&&l.left.data===e&&null!==l.left.left&&null===l.left.left.left&&null===l.left.left.right&&null===l.left.right)l.left=l.left.left;else if(l.left&&l.left.data===e&&null!==l.left.right&&null===l.left.right.left&&null===l.left.right.right&&null===l.left.left)l.left=l.left.right;else if(l.right&&l.right.data===e&&null!==l.right.left&&null===l.right.left.left&&null===l.right.left.right&&null===l.right.right)l.right=l.right.left;else if(l.right&&l.right.data===e&&null!==l.right.right&&null===l.right.right.left&&null===l.right.right.right&&null===l.right.left)l.right=l.right.right;else if(l.data===e&&null!==l.left&&null!==l.right){let t=l.right,e=t;for(;null!==t.left;)e=t,t=t.left;l.data=t.data,e.left=null}else{if(e>l.data&&null===l.right)return void console.log(`${e} not found, please try again`);if(e<l.data&&null===l.left)return void console.log(`${e} not found, please try again`);if(e<l.data)return t(l.left,e);if(e>l.data)return t(l.right,e)}}(this.root,t)}find(t){!function t(l,e){if(l.data===e)return console.log(l),l;if(e>l.data&&null===l.right)console.log(`${e} not found`);else{if(!(e<l.data&&null===l.left))return e>l.data?t(l.right,e):e<l.data?t(l.left,e):void 0;console.log(`${e} not found`)}}(this.root,t)}levelOrderRecursive(t){}levelOrderIterative(t){let l=[];for(l.push(this.root);0!==l.length;)t(l[0]),l[0].left&&l.push(l[0].left),l[0].right&&l.push(l[0].right),l.shift()}inOrder(t){!function l(e){t(e),null===e.left&&null===e.right||(e.left&&l(e.left),e.right&&l(e.right))}(this.root)}}([1,7,4,23,8,9,4,3,5,7,9,67,6345,324]);r.insert(9),r.delete(323),i(r.root),r.find(6),r.find(1),r.inOrder((t=>console.log(t)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,